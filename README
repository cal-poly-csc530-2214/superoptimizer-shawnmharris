Review of paper and code on Superoptimizer

I read the paper, a couple of time until I felt I
understood it pretty well.

I downloaded the code and installed make and then modified 
the Makefile to use clang (which I have used before) and 
was able to build using the Makefile using my shell: gitbash

I followed the instructions, first tested some of the provided
sample functions like abs and bitblt, some output below:

===========================================
abs 3 
===========================================
Searching for programs with 3 operations.

Found a 3-operation program:
   shrs  r1,rx,#31
   add   r2,r1,rx
   xor   r3,r2,r1
   Expr: (((x >>s 31) + x) ^ (x >>s 31))

Found a 3-operation program:
   shrs  r1,rx,#31
   xor   r2,r1,rx
   sub   r3,r2,r1
   Expr: (((x >>s 31) ^ x) - (x >>s 31))
Found 2 solutions.
Counters = 13384, 23166, 619533, total = 656083
Process time = 0.006 secs


===========================================
abs 4
===========================================
Found a 4-operation program:
   shrs  r1,rx,rx
   shrs  r2,r1,#31
   add   r3,r2,rx
   xor   r4,r3,r2
   Expr: ((((x >>s x) >>s 31) + x) ^ ((x >>s x) >>s 31))

Found a 4-operation program:
   shrs  r1,rx,rx
   shrs  r2,r1,#31
   xor   r3,r2,rx
   sub   r4,r3,r2
   Expr: ((((x >>s x) >>s 31) ^ x) - ((x >>s x) >>s 31))

Found a 4-operation program:
   revb  r1,rx
   shrs  r2,rx,#31
   add   r3,r2,rx
   xor   r4,r3,r2
   Expr: (((x >>s 31) + x) ^ (x >>s 31))

Found a 4-operation program:
   revb  r1,rx
   shrs  r2,rx,#31
   xor   r3,r2,rx
   sub   r4,r3,r2
   Expr: (((x >>s 31) ^ x) - (x >>s 31))
Found 398 solutions.
Counters = 2616334, 2626116, 4980027, 134454981, total = 144677458
Process time = 1.377 secs


just shown a couple of the solutions because 398 is too many


when running aha 5, it was still going with thousands of solutions after
several minutes so I killed it

for bitblt, 0 solutions were found with 2 instructions, but 7 were
found with 3 and 2168 with 4

next I tried to write my own function following the instructions
I wanted to make a 2d vector dot product, that turned out to not 
be possible since the max args is 3

next I tried to write a greater than function that
just returns (x > y)
this was unsuccessful, I guess there is not a "more" optimized version

finally I tried: (x & y)
and found a pretty cool result, the superoptimizer was able to
find a 1 instruction version!!!

full code and output shown below

/* mine.frag.c */

#define NARGS 2

#include "aha.h"

int userfun(int x, int y) 
{
    return (x & y);
}


Searching for programs with 1 operations.

Found a 1-operation program:
   and   r1,ry,rx
   Expr: (y & x)
Found 1 solutions.
Counters = 985, total = 985
Process time = 0.000 secs




